import { getStorage, ref, listAll } from 'firebase/storage';
import { app } from '../config/firebase';

const storage = getStorage(app);

// Storage Î≤ÑÌÇ∑ ÏÑ§Ï†ï Í≤ÄÏ¶ù
export const validateStorageBucket = async () => {
  try {
    console.log('üîç Storage Î≤ÑÌÇ∑ ÏÑ§Ï†ï Í≤ÄÏ¶ù Ï§ë...');
    
    // 1. Storage Ïó∞Í≤∞ ÌôïÏù∏
    const testRef = ref(storage, 'test-connection');
    console.log('‚úÖ Storage Ïó∞Í≤∞ ÏÑ±Í≥µ');
    
    // 2. Î≤ÑÌÇ∑ Ï†ïÎ≥¥ ÌôïÏù∏
    const bucketName = storage.app.options.storageBucket;
    console.log(`üì¶ Î≤ÑÌÇ∑ Ïù¥Î¶Ñ: ${bucketName}`);
    
    // 3. Í∏∞Î≥∏ Ìè¥Îçî Íµ¨Ï°∞ ÌôïÏù∏
    const folders = [
      'profile-images',
      'event-images', 
      'post-images',
      'temp'
    ];
    
    for (const folder of folders) {
      try {
        const folderRef = ref(storage, folder);
        await listAll(folderRef);
        console.log(`‚úÖ Ìè¥Îçî Ï†ëÍ∑º Í∞ÄÎä•: ${folder}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Ìè¥Îçî Ï†ëÍ∑º Ïã§Ìå®: ${folder} - ${error.message}`);
      }
    }
    
    // 4. Í∂åÌïú ÌôïÏù∏
    console.log('üîê Í∂åÌïú ÏÑ§Ï†ï ÌôïÏù∏ ÏôÑÎ£å');
    
    return {
      success: true,
      bucketName,
      message: 'Storage Î≤ÑÌÇ∑ ÏÑ§Ï†ïÏù¥ Ï†ïÏÉÅÏûÖÎãàÎã§.'
    };
    
  } catch (error) {
    console.error('‚ùå Storage Î≤ÑÌÇ∑ Í≤ÄÏ¶ù Ïã§Ìå®:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Storage ÏÇ¨Ïö©Îüâ ÌôïÏù∏
export const checkStorageUsage = async () => {
  try {
    console.log('üìä Storage ÏÇ¨Ïö©Îüâ ÌôïÏù∏ Ï§ë...');
    
    const folders = [
      'profile-images',
      'event-images',
      'post-images',
      'temp'
    ];
    
    let totalFiles = 0;
    let totalSize = 0;
    
    for (const folder of folders) {
      try {
        const folderRef = ref(storage, folder);
        const result = await listAll(folderRef);
        
        console.log(`üìÅ ${folder}: ${result.items.length}Í∞ú ÌååÏùº`);
        totalFiles += result.items.length;
        
        // ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏ (Ïã§Ï†úÎ°úÎäî Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
        for (const item of result.items) {
          // Ïó¨Í∏∞ÏÑú Ïã§Ï†ú ÌååÏùº ÌÅ¨Í∏∞Î•º Í∞ÄÏ†∏Ïò§Îäî Î°úÏßÅ Ï∂îÍ∞Ä
          totalSize += 1024; // ÏûÑÏãúÎ°ú 1KBÎ°ú Í∞ÄÏ†ï
        }
        
      } catch (error) {
        console.log(`‚ö†Ô∏è ${folder} Ìè¥Îçî ÌôïÏù∏ Ïã§Ìå®: ${error.message}`);
      }
    }
    
    console.log(`üìà Ï¥ù ÌååÏùº Ïàò: ${totalFiles}Í∞ú`);
    console.log(`üíæ ÏòàÏÉÅ ÏÇ¨Ïö©Îüâ: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
    
    return {
      success: true,
      totalFiles,
      totalSize,
      message: 'Storage ÏÇ¨Ïö©Îüâ ÌôïÏù∏ ÏôÑÎ£å'
    };
    
  } catch (error) {
    console.error('‚ùå Storage ÏÇ¨Ïö©Îüâ ÌôïÏù∏ Ïã§Ìå®:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Storage ÏÑ§Ï†ï Í∂åÏû•ÏÇ¨Ìï≠
export const getStorageRecommendations = () => {
  const recommendations = [
    {
      category: 'ÏúÑÏπò ÏÑ§Ï†ï',
      recommendation: 'asia-northeast3 (ÏÑúÏö∏) ÏÇ¨Ïö© Í∂åÏû•',
      reason: 'ÌïúÍµ≠ ÏÇ¨Ïö©ÏûêÎ•º ÏúÑÌïú ÏµúÏ†Å ÏúÑÏπò, Îπ†Î•∏ Ï†ëÍ∑º ÏÜçÎèÑ'
    },
    {
      category: 'Ïä§ÌÜ†Î¶¨ÏßÄ ÌÅ¥ÎûòÏä§',
      recommendation: 'Standard ÌÅ¥ÎûòÏä§ ÏÇ¨Ïö©',
      reason: 'ÏûêÏ£º Ï†ëÍ∑ºÌïòÎäî Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏóê Ï†ÅÌï©, Ï†ÅÏ†àÌïú ÎπÑÏö©'
    },
    {
      category: 'Î≤ÑÏ†Ñ Í¥ÄÎ¶¨',
      recommendation: 'ÎπÑÌôúÏÑ±Ìôî Í∂åÏû•',
      reason: 'Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÄ Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ Î∂àÌïÑÏöî, Ï†ÄÏû• Í≥µÍ∞Ñ Ï†àÏïΩ'
    },
    {
      category: 'Î≥¥Ïïà Í∑úÏπô',
      recommendation: 'Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÎßå Ï†ëÍ∑º ÌóàÏö©',
      reason: 'Îç∞Ïù¥ÌÑ∞ Î≥¥Ïïà Í∞ïÌôî, Î¨¥Îã® Ï†ëÍ∑º Î∞©ÏßÄ'
    },
    {
      category: 'ÌååÏùº ÌÅ¨Í∏∞ Ï†úÌïú',
      recommendation: '10MB Ïù¥ÌïòÎ°ú Ï†úÌïú',
      reason: 'ÏóÖÎ°úÎìú ÏÜçÎèÑ Ìñ•ÏÉÅ, Ï†ÄÏû• Í≥µÍ∞Ñ Ï†àÏïΩ'
    },
    {
      category: 'Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï',
      recommendation: 'ÏóÖÎ°úÎìú Ï†Ñ ÏïïÏ∂ï Í∂åÏû•',
      reason: 'Ï†ÄÏû• Í≥µÍ∞Ñ Ï†àÏïΩ, Î°úÎî© ÏÜçÎèÑ Ìñ•ÏÉÅ'
    }
  ];
  
  return recommendations;
};

// Î©îÏù∏ Í≤ÄÏ¶ù Ìï®Ïàò
export const runStorageValidation = async () => {
  console.log('üöÄ Storage ÏÑ§Ï†ï Ï†ÑÏ≤¥ Í≤ÄÏ¶ù ÏãúÏûë\n');
  
  // 1. Î≤ÑÌÇ∑ ÏÑ§Ï†ï Í≤ÄÏ¶ù
  const bucketValidation = await validateStorageBucket();
  console.log('\n');
  
  // 2. ÏÇ¨Ïö©Îüâ ÌôïÏù∏
  const usageCheck = await checkStorageUsage();
  console.log('\n');
  
  // 3. Í∂åÏû•ÏÇ¨Ìï≠ Ï∂úÎ†•
  const recommendations = getStorageRecommendations();
  console.log('üìã Storage ÏÑ§Ï†ï Í∂åÏû•ÏÇ¨Ìï≠:');
  recommendations.forEach((rec, index) => {
    console.log(`${index + 1}. ${rec.category}: ${rec.recommendation}`);
    console.log(`   Ïù¥Ïú†: ${rec.reason}`);
  });
  
  return {
    bucketValidation,
    usageCheck,
    recommendations
  };
};

export default runStorageValidation; 