import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  Alert,
  Switch,
  Linking,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../contexts/AuthContext';
import { useNotificationSettings } from '../contexts/NotificationSettingsContext';
import AsyncStorage from '@react-native-async-storage/async-storage';

// NetGill ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú
const COLORS = {
  PRIMARY: '#3AF8FF',
  BACKGROUND: '#000000',
  SURFACE: '#1F1F24',
  CARD: '#171719',
  WHITE: '#ffffff',
  GRAY_100: '#f3f4f6',
  GRAY_200: '#e5e7eb',
  GRAY_300: '#d1d5db',
  GRAY_400: '#9ca3af',
  GRAY_500: '#6b7280',
  GRAY_600: '#4b5563',
  GRAY_700: '#374151',
  GRAY_800: '#1f2937',
  GRAY_900: '#111827',
  BLUE_50: '#eff6ff',
  BLUE_600: '#2563eb',
  RED_600: '#dc2626',
};

const SettingsScreen = ({ navigation }) => {
  const { logout } = useAuth();
  const { settings, toggleSetting, updateSetting } = useNotificationSettings();
  
  const [otherSettings, setOtherSettings] = useState({
    privacy: {
      profileVisibility: 'public',
      locationSharing: true,
      activitySharing: true
    },
    matching: {
      maxDistance: 5,
      levelRange: 'all',
      timeFlexibility: 30
    },
    preferences: {
      units: 'metric',
      theme: 'light',
      language: 'ko'
    }
  });

  const toggleOtherSetting = (category, key) => {
    setOtherSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: !prev[category][key]
      }
    }));
  };

  const updateOtherSetting = (category, key, value) => {
    setOtherSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: value
      }
    }));
  };

  const handleChildSafetyPolicy = () => {
    Alert.alert(
      'ÏïÑÎèô ÏïàÏ†Ñ Ï†ïÏ±Ö',
      'RunOnÏùÄ ÏïÑÎèôÏùò ÏïàÏ†ÑÍ≥º Î≥¥Ìò∏Î•º ÏµúÏö∞ÏÑ†ÏúºÎ°ú Ìï©ÎãàÎã§.\n\n‚Ä¢ ÏïÑÎèôÏÑ±Ï†ÅÌïôÎåÄÏ∞©Ï∑®(CSAE) ÏΩòÌÖêÏ∏† Í∏àÏßÄ\n‚Ä¢ Îßå 13ÏÑ∏ ÎØ∏Îßå ÏÇ¨Ïö©Ïûê Î≥¥Ìò∏Ïûê ÎèôÏùò ÌïÑÏöî\n‚Ä¢ 24ÏãúÍ∞Ñ Ïã†Í≥† ÏãúÏä§ÌÖú Ïö¥ÏòÅ\n‚Ä¢ Î∂ÄÏ†ÅÏ†àÌïú ÏΩòÌÖêÏ∏† ÏûêÎèô ÌïÑÌÑ∞ÎßÅ\n\nÏã†Í≥†: safety@runon.app\nÍ∏¥Í∏âÏã†Í≥†: 02-0000-0000',
      [
        { text: 'ÌôïÏù∏', style: 'default' },
        {
          text: 'ÏÉÅÏÑ∏Î≥¥Í∏∞',
          onPress: () => {
            Linking.openURL('https://netgil-lee.github.io/RunOn-App/')
              .catch(() => Alert.alert('Ïò§Î•ò', 'ÎßÅÌÅ¨Î•º Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.'));
          }
        }
      ]
    );
  };

  const handleDebugInfo = async () => {
    try {
      const debugLog = await AsyncStorage.getItem('onboarding_debug_log');
      if (debugLog) {
        const debugInfo = JSON.parse(debugLog);
        Alert.alert(
          'ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥',
          `ÏãúÍ∞Ñ: ${debugInfo.timestamp}\nÎã®Í≥Ñ: ${debugInfo.step}\nÏÑ†ÌÉùÎêú Î™©Ìëú: ${debugInfo.currentGoals.length}Í∞ú\nÏßÑÌñâ Í∞ÄÎä•: ${debugInfo.canProceed}\nÎ©îÏãúÏßÄ: ${debugInfo.message}`,
          [
            { text: 'ÌôïÏù∏', style: 'default' },
            {
              text: 'Î°úÍ∑∏ ÏÇ≠Ï†ú',
              onPress: async () => {
                await AsyncStorage.removeItem('onboarding_debug_log');
                Alert.alert('ÏôÑÎ£å', 'ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
              }
            }
          ]
        );
      } else {
        Alert.alert('ÏïåÎ¶º', 'Ï†ÄÏû•Îêú ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error) {
      Alert.alert('Ïò§Î•ò', 'ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  };

  const handleLogout = async () => {
    Alert.alert(
      'Î°úÍ∑∏ÏïÑÏõÉ',
      'Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'Î°úÍ∑∏ÏïÑÏõÉ', 
          style: 'destructive',
          onPress: async () => {
            try {
              console.log('üö™ SettingsScreen: Î°úÍ∑∏ÏïÑÏõÉ ÏãúÏûë');
              await logout();
              console.log('‚úÖ SettingsScreen: Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');
              // Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ Ïãú Î≥ÑÎèÑ ÏïåÎ¶º ÏóÜÏù¥ ÏûêÎèôÏúºÎ°ú Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
            } catch (error) {
              console.error('‚ùå SettingsScreen: Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®', error);
              Alert.alert('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®', 'Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            }
          }
        }
      ]
    );
  };

  const handleDeleteAccount = () => {
    Alert.alert(
      'Í≥ÑÏ†ï ÏÇ≠Ï†ú',
      'Í≥ÑÏ†ï ÏÇ≠Ï†úÎ•º ÏöîÏ≤≠ÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥Î©îÏùºÎ°ú ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'ÏöîÏ≤≠ÌïòÍ∏∞', 
          style: 'destructive',
          onPress: () => {
            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            const user = useAuth().user;
            const userInfo = user ? `ÏÇ¨Ïö©Ïûê ID: ${user.uid}\nÌú¥ÎåÄÌè∞Î≤àÌò∏: ${user.phoneNumber || 'Ïïå Ïàò ÏóÜÏùå'}` : 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.';
            
            // Ïù¥Î©îÏùº ÎßÅÌÅ¨ ÏÉùÏÑ±
            const emailSubject = encodeURIComponent('RunOn Ïï± Í≥ÑÏ†ï ÏÇ≠Ï†ú ÏöîÏ≤≠');
            const emailBody = encodeURIComponent(
              `ÏïàÎÖïÌïòÏÑ∏Ïöî,\n\nRunOn Ïï±ÏóêÏÑú Í≥ÑÏ†ï ÏÇ≠Ï†úÎ•º ÏöîÏ≤≠Ìï©ÎãàÎã§.\n\nÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:\n${userInfo}\n\nÏöîÏ≤≠ ÏùºÏãú: ${new Date().toLocaleString('ko-KR')}\n\nÍ≥ÑÏ†ï ÏÇ≠Ï†úÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.\n\nÍ∞êÏÇ¨Ìï©ÎãàÎã§.`
            );
            
                         const emailUrl = `mailto:dlrhdkgml12@gmail.com?subject=${emailSubject}&body=${emailBody}`;
            
                         // Ïù¥Î©îÏùº Ïï± Ïó¥Í∏∞
             Linking.openURL(emailUrl).catch(() => {
               Alert.alert('Ïò§Î•ò', 'Ïù¥Î©îÏùº Ïï±ÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú dlrhdkgml12@gmail.comÏúºÎ°ú Í≥ÑÏ†ï ÏÇ≠Ï†ú ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Ï£ºÏÑ∏Ïöî.');
             });
          }
        }
      ]
    );
  };

  const SettingItem = ({ icon, title, subtitle, onPress, showArrow = true, children }) => (
    <TouchableOpacity 
      style={styles.settingItem} 
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.settingItemLeft}>
        <View style={styles.iconContainer}>
          <Ionicons name={icon} size={20} color="#97DCDE" />
        </View>
        <View style={styles.settingTextContainer}>
          <Text style={styles.settingTitle}>{title}</Text>
          {subtitle && <Text style={styles.settingSubtitle}>{subtitle}</Text>}
        </View>
      </View>
      <View style={styles.settingItemRight}>
        {children}
        {showArrow && <Ionicons name="chevron-forward" size={16} color={COLORS.GRAY_400} />}
      </View>
    </TouchableOpacity>
  );

  const ToggleSwitch = ({ enabled, onToggle }) => (
    <Switch
      value={enabled}
      onValueChange={onToggle}
      trackColor={{ false: COLORS.GRAY_600, true: COLORS.PRIMARY }}
      thumbColor={enabled ? COLORS.WHITE : COLORS.GRAY_300}
      ios_backgroundColor={COLORS.GRAY_600}
    />
  );

  const SectionTitle = ({ title }) => (
    <View style={styles.sectionTitle}>
      <Text style={styles.sectionTitleText}>{title}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      {/* Ìó§Îçî */}
      <SafeAreaView style={styles.header}>
        <View style={styles.headerContent}>
          <TouchableOpacity 
            style={styles.backButton} 
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color={COLORS.WHITE} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>ÏÑ§Ï†ï</Text>
          <View style={styles.headerSpacer} />
        </View>
      </SafeAreaView>

      {/* Ïä§ÌÅ¨Î°§ Í∞ÄÎä•Ìïú Ïª®ÌÖêÏ∏† */}
      <ScrollView 
        style={styles.scrollView} 
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >


        {/* ÏïåÎ¶º ÏÑ§Ï†ï */}
        <SectionTitle title="ÏïåÎ¶º ÏÑ§Ï†ï" />
        <View style={styles.section}>
          <SettingItem
            icon="megaphone-outline"
            title="ÏÜåÏãù ÏïåÎ¶º"
            subtitle="ÏÉàÎ°úÏö¥ Í∏∞Îä•, Ïù¥Î≤§Ìä∏ Îì± ÏÜåÏãù ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§."
            onPress={() => toggleSetting('notifications', 'newsNotification')}
            showArrow={false}
          >
            <ToggleSwitch 
              enabled={settings.notifications.newsNotification}
              onToggle={() => toggleSetting('notifications', 'newsNotification')}
            />
          </SettingItem>
          <SettingItem
            icon="notifications-outline"
            title="Î™®ÏûÑ ÏïåÎ¶º"
            subtitle="Îü¨Îãù Î™®ÏûÑ Í¥ÄÎ†® ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§"
            onPress={() => toggleSetting('notifications', 'meetingReminder')}
            showArrow={false}
          >
            <ToggleSwitch 
              enabled={settings.notifications.meetingReminder}
              onToggle={() => toggleSetting('notifications', 'meetingReminder')}
            />
          </SettingItem>
          <SettingItem
            icon="people-outline"
            title="Ïª§ÎÆ§ÎãàÌã∞ ÏïåÎ¶º"
            subtitle="Ï±ÑÌåÖ, ÏûëÏÑ±Ìïú Í∏ÄÏùò Ï¢ãÏïÑÏöîÏôÄ ÎåìÍ∏Ä ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§."
            onPress={() => toggleSetting('notifications', 'newMember')}
            showArrow={false}
          >
            <ToggleSwitch 
              enabled={settings.notifications.newMember}
              onToggle={() => toggleSetting('notifications', 'newMember')}
            />
          </SettingItem>
          <SettingItem
            icon="cloud-outline"
            title="ÎÇ†Ïî® ÏïåÎ¶º"
            subtitle="Îü¨ÎãùÏóê ÏòÅÌñ•ÏùÑ Ï£ºÎäî ÎÇ†Ïî® Î≥ÄÌôî ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§."
            onPress={() => toggleSetting('notifications', 'weatherAlert')}
            showArrow={false}
          >
            <ToggleSwitch 
              enabled={settings.notifications.weatherAlert}
              onToggle={() => toggleSetting('notifications', 'weatherAlert')}
            />
          </SettingItem>
          <SettingItem
            icon="shield-checkmark-outline"
            title="ÏïàÏ†Ñ ÏïåÎ¶º"
            subtitle="ÌïúÍ∞ï Ï£ºÎ≥Ä ÏïàÏ†Ñ Í¥ÄÎ†® ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§."
            onPress={() => toggleSetting('notifications', 'safetyAlert')}
            showArrow={false}
          >
            <ToggleSwitch 
              enabled={settings.notifications.safetyAlert}
              onToggle={() => toggleSetting('notifications', 'safetyAlert')}
            />
          </SettingItem>
        </View>



        {/* Ïï± */}
        <SectionTitle title="Ïï±" />
        <View style={styles.section}>
          <SettingItem
            icon="help-circle-outline"
            title="Ïï± ÏÇ¨Ïö© Í∞ÄÏù¥Îìú"
            subtitle="ÏûêÏ£º Î¨ªÎäî ÏßàÎ¨∏Í≥º ÏÇ¨Ïö©Î≤ï ÏïàÎÇ¥"
            onPress={() => navigation.navigate('AppGuide')}
          />
          <SettingItem
            icon="call-outline"
            title="Í≥†Í∞ùÏßÄÏõê"
            subtitle="1:1 Î¨∏Ïùò Î∞è ÏÉÅÎã¥ ÏÑúÎπÑÏä§"
            onPress={() => Alert.alert('Í≥†Í∞ùÏßÄÏõê', 'Í≥†Í∞ùÏßÄÏõê Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.')}
          />
          <SettingItem
            icon="document-text-outline"
            title="Ïù¥Ïö©ÏïΩÍ¥Ä"
            subtitle="ÎÉáÍ∏∏ ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä"
            onPress={() => Alert.alert('Ïù¥Ïö©ÏïΩÍ¥Ä', 'Ïù¥Ïö©ÏïΩÍ¥ÄÏù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.')}
          />
          <SettingItem
            icon="shield-outline"
            title="Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®"
            subtitle="Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö©Ïóê ÎåÄÌïú ÏïàÎÇ¥"
            onPress={() => Alert.alert('Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®', 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.')}
          />
          <SettingItem
            icon="shield-checkmark-outline"
            title="ÏïÑÎèô ÏïàÏ†Ñ Ï†ïÏ±Ö"
            subtitle="ÏïÑÎèô Î≥¥Ìò∏ Î∞è ÏïàÏ†ÑÏóê Í¥ÄÌïú Ï†ïÏ±Ö"
            onPress={() => handleChildSafetyPolicy()}
          />
          <SettingItem
            icon="bug-outline"
            title="ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥"
            subtitle="Ïò®Î≥¥Îî© ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ ÌôïÏù∏"
            onPress={() => handleDebugInfo()}
          />
          <SettingItem
            icon="information-circle-outline"
            title="Î≤ÑÏ†Ñ Ï†ïÎ≥¥"
            subtitle="RunOn v1.0.0"
            onPress={() => Alert.alert('Î≤ÑÏ†Ñ Ï†ïÎ≥¥', 'RunOn v1.0.0\nÏµúÏã† Î≤ÑÏ†ÑÏûÖÎãàÎã§.')}
          />
        </View>

        {/* Í≥ÑÏ†ï */}
        <SectionTitle title="Í≥ÑÏ†ï" />
        <View style={styles.section}>
          <SettingItem
            icon="shield-outline"
            title="ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω"
            subtitle="Í≥ÑÏ†ï Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî"
            onPress={() => Alert.alert('ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω', 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Í∏∞Îä•Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê©ÎãàÎã§.')}
          />
          <SettingItem
            icon="log-out-outline"
            title="Î°úÍ∑∏ÏïÑÏõÉ"
            subtitle="ÌòÑÏû¨ Í≥ÑÏ†ïÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉÌï©ÎãàÎã§"
            onPress={handleLogout}
            showArrow={false}
          />
          <SettingItem
            icon="trash-outline"
            title="Í≥ÑÏ†ï ÏÇ≠Ï†ú"
            subtitle="Í≥ÑÏ†ïÏùÑ ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÌï©ÎãàÎã§"
            onPress={handleDeleteAccount}
            showArrow={false}
          >
            <Text style={styles.deleteText}>ÏÇ≠Ï†ú</Text>
          </SettingItem>
        </View>

        {/* ÌïòÎã® Ïó¨Î∞± */}
        <View style={styles.bottomSpacing} />
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND,
  },
  header: {
    backgroundColor: COLORS.SURFACE,
  },
  headerContent: {
    height: 56,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
  },
  backButton: {
    width: 44,
    height: 44,
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.WHITE,
    fontFamily: 'Pretendard-SemiBold',
  },
  headerSpacer: {
    width: 44,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 5,
  },
  sectionTitle: {
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  sectionTitleText: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.GRAY_400,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
    fontFamily: 'Pretendard-SemiBold',
  },
  section: {
    backgroundColor: COLORS.CARD,
    marginBottom: 8,
    borderRadius: 12,
    overflow: 'hidden',
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: COLORS.CARD,
  },
  settingItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  iconContainer: {
    width: 40,
    height: 40,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  settingTextContainer: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.WHITE,
    marginBottom: 2,
    fontFamily: 'Pretendard-Medium',
  },
  settingSubtitle: {
    fontSize: 14,
    color: COLORS.GRAY_400,
    fontFamily: 'Pretendard-Regular',
  },
  settingItemRight: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  deleteText: {
    color: COLORS.RED_600,
    fontSize: 16,
    fontWeight: '500',
    fontFamily: 'Pretendard-Medium',
  },
  bottomSpacing: {
    height: 100,
  },
});

export default SettingsScreen; 